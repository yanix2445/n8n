version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n_app
    restart: unless-stopped
    
    # Configuration des ports
    ports:
      - "${N8N_PORT:-2445}:5678"

    # Variables d'environnement
    environment:
      # Base de données
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      
      # Configuration de base
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      
      # URLs configurables
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
      - WEBHOOK_URL=${WEBHOOK_URL}
      
      # Optimisations
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
      - N8N_TEMPLATES_ENABLED=true
      - N8N_ONBOARDING_FLOW_DISABLED=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_SECURE_COOKIE=false
      
      # Performance
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=14400
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=336
      
      # Timezone
      - GENERIC_TIMEZONE=${TIMEZONE:-Europe/Paris}
      - TZ=${TIMEZONE:-Europe/Paris}
      
    # Volumes
    volumes:
      - n8n_data:/home/node/.n8n
      - ./local_files:/files:rw
      - /etc/localtime:/etc/localtime:ro
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Limitations de ressources
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Dépendances
    depends_on:
      postgres:
        condition: service_healthy
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Labels
    labels:
      - "traefik.enable=false"
      - "com.docker.compose.project=n8n"
      - "com.docker.compose.service=n8n"
    
    networks:
      - n8n_network

  postgres:
    image: postgres:17-alpine
    container_name: n8n_postgres
    restart: unless-stopped
    
    # Variables d'environnement
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      - PGDATA=/var/lib/postgresql/data/pgdata
      
    # Volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - /etc/localtime:/etc/localtime:ro
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Limitations de ressources
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Configuration PostgreSQL
    command: |
      postgres
      -c max_connections=200
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=none
      -c log_duration=off
      -c log_lock_waits=on
      -c log_min_duration_statement=1000
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Labels
    labels:
      - "com.docker.compose.project=n8n"
      - "com.docker.compose.service=postgres"
    
    networks:
      - n8n_network

  # Service optionnel de backup automatique
  postgres_backup:
    image: postgres:17-alpine
    container_name: n8n_postgres_backup
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGHOST=postgres
      - BACKUP_RETENTION_DAYS=7
    
    volumes:
      - ./backups:/backups
      - /etc/localtime:/etc/localtime:ro
    
    # Script de backup quotidien
    command: |
      sh -c '
        while true; do
          echo "Starting backup at $$(date)"
          pg_dump -h postgres -U $$POSTGRES_USER -d $$POSTGRES_DB > /backups/n8n_backup_$$(date +%Y%m%d_%H%M%S).sql
          echo "Backup completed at $$(date)"
          
          # Nettoyer les anciens backups
          find /backups -name "*.sql" -type f -mtime +$$BACKUP_RETENTION_DAYS -delete
          
          # Attendre 24h
          sleep 86400
        done
      '
    
    depends_on:
      postgres:
        condition: service_healthy
    
    networks:
      - n8n_network

# Volumes persistants
volumes:
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/n8n_data
  
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/postgres_data

# Réseau isolé
networks:
  n8n_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: n8n_bridge